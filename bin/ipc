#!/usr/bin/env bash
##
# `op-bash-example` - A simple Operator Framework example written in Bash that makes use of POSIX Named Pipes for IPC request IO
#
# This file is part of op-bash-example.
#
# MIT License
#
# Copyright (c) 2022 Socket Supply Co.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: 2022 Socket Supply Co. <socketsupply.co>
##

command="$1"
pids=()

killpids () {
  for pid in "${pids[@]}"; do
    kill -TERM "$pid" 2>/dev/null
  done

  for pid in "${pids[@]}"; do
    kill -9 "$pid" 2>/dev/null
  done
}

onsigterm () {
  killpids
  exit 0
}

encode_uri_component () {
  local string="$1"
  local length=${#string}
  local char=""
  local i

  for (( i = 0 ; i < length ; i++ )); do
    char=${string:$i:1}

    case "$char" in
      [-_.~a-zA-Z0-9]) echo -ne "$char" ;;
      *) printf '%%%02x' "'$char" ;;
    esac
  done
}

decode_uri_component () {
  echo -e "$(echo "$@" | sed -E 's/%([0-9a-fA-F]{2})/\\x\1/g;s/\+/ /g')"
}

io () {
  {
    if [ "$command" != "send" ] && [ "$command" != "stdout" ]; then
      while true; do
        if read -r line < /tmp/op-bash-stdin; then
          # shellcheck disable=SC2155
          local protocol="$(echo -e "$line" | grep :// | sed 's/^\(.*:\/\/\).*/\1/g')"
          # shellcheck disable=SC2001,SC2155
          local url="$(echo -e "$line" | sed "s,$protocol,,g")"
          # shellcheck disable=SC2001,SC2155
          local cmd=$(echo -e "$url" | sed 's/?.*$//g')

          if [ "$cmd" != "resolve" ]; then
            echo -e >&2 "error: Invalid command in response: '$cmd'"
            echo -e >&2 "error: Got URL from IPC: '$url'"
            exit 1
          fi

          # shellcheck disable=SC2207
          local args=()
          IFS='&' read -r -d '' -a args < <(decode_uri_component "$(echo -e "$url" | sed "s,$cmd?,,g")")

          for arg in "${args[@]}"; do
            local kv=()
            IFS='=' read -r -d '' -a kv < <(echo -ne "$arg")
            local key="${kv[0]}"
            local value="${kv[1]}"

            if [ "$key" == "value" ]; then
              echo -e "$value"
              break
            fi
          done

          exit
        fi
      done
    fi
  } &

  pids+=($!)
}

write () {
  {
    # shellcheck disable=SC2059,SC2068
    printf "ipc://%s?" "$1"
    shift
    local args=()
    # shellcheck disable=SC2001,SC2207
    IFS='&' read -r -d '' -a args < <(echo -ne "$@")

    for (( i = 0; i < ${#args[@]}; ++i )); do
      local arg="${args[$i]}"
      local kv=()
      IFS='=' read -r -d '' -a kv < <(echo -ne "$arg")

      local key="${kv[0]}"
      local value="${kv[1]}"

      echo -ne "$key"
      echo -ne '='
      echo -ne "$(encode_uri_component "$(echo -ne "$value")")"
      printf '&'
    done

    ## flush
    echo
  } > /tmp/op-bash-stdout
}

init () {
  # shellcheck disable=SC2068
  write $@ &
  pids+=($!)
}

signals () {
  trap onsigterm SIGTERM SIGINT
}

signals || return $?
# shellcheck disable=SC2068
init $@ || return $?
io || return $?

wait
